<div class="container">
    <h2 class="border-bottom pb-2 mb-4">教室 101</h2>
    <div class="row">
        <div class="col-md-9">
            <div class="square-frame">
                <canvas id="myLineChart"></canvas>
                <canvas id="graph" ondragover="f_dragover(event)" ondrop="f_drop(event)"
                    ondragenter="f_dragenter(event)" ondragleave="f_dragleave(event)">
                </canvas>
            </div>
        </div>
        <div class="col-md-3 bg-light pt-5 pb-5">
            <% if current_user == @room.user then %>
            <a href="#" type="button" class="btn btn-primary btn-block pt-3 pb-3 mb-3" role="button" draggable="false" onclick="deleteItem()">
                ぜんぶけす
            </a>
            <% end %>
            <div class="row align-items-center" id="items">
                <%= image_tag "light_bl.png", alt: "Light Blue", id: "light_bl", class: "item", draggable: "true", ondragstart: "f_dragstart(event)", ondragend: "f_dragend(event)" %>
                <%= image_tag "ques_bl.png", alt: "Question Blue", id: "question_bl", class: "item", draggable: "true", ondragstart: "f_dragstart(event)", ondragend: "f_dragend(event)" %>
                <%= image_tag "light_re.png", alt: "Light Red", id: "light_re", class: "item", draggable: "true", ondragstart: "f_dragstart(event)", ondragend: "f_dragend(event)" %>
                <%= image_tag "ques_re.png", alt: "Question Red", id: "question_re", class: "item", draggable: "true", ondragstart: "f_dragstart(event)", ondragend: "f_dragend(event)" %>
                <%= image_tag "light_gr.png", alt: "Light Green", id: "light_gr", class: "item", draggable: "true", ondragstart: "f_dragstart(event)", ondragend: "f_dragend(event)" %>
                <%= image_tag "ques_gr.png", alt: "Question Green", id: "question_gr", class: "item", draggable: "true", ondragstart: "f_dragstart(event)", ondragend: "f_dragend(event)" %>
                <%= image_tag "light_ye.png", alt: "Light Yellow", id: "light_ye", class: "item", draggable: "true", ondragstart: "f_dragstart(event)", ondragend: "f_dragend(event)" %>
                <%= image_tag "ques_ye.png", alt: "Question Yellow", id: "question_ye", class: "item", draggable: "true", ondragstart: "f_dragstart(event)", ondragend: "f_dragend(event)" %>
            </div>
        </div>
    </div>
</div>

<style>
    .item {
        margin: 18px;
        padding: 0px;
        width: 80px;
        height: auto;
        color: #FFFFFF;
    }

    .item:hover {
        cursor: pointer;
    }

    .square-frame {
        border: 1px dotted #999;
        height: 0;
        width: 100%;
        padding-bottom: 80%;
        position: relative;
    }

    .square-frame canvas {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        margin: auto;
    }
</style>

<script>
    let roomChannel;
    let canvas, context, room_id = <%= @room.id %>;

    // 電球や?の状態を保存する変数
    // 既にドラッグをしてしまったのか？
    // ドラッグ＆ドロップをしたのであればどの状態にドロップしたのか？
    let ItemStatus = []

    // 画像の倍率
    let img_ratio = 0.3;
    let img_path = {};
    
    // 現在ドラッグ&ドロップされている状態を表す
    let currentstatus = null;
    let currentstatusIsDraw = false;

    window.onload = function () {
        canvas = document.getElementById("graph");
        canvas.width = canvas.parentNode.clientWidth;
        canvas.height = canvas.parentNode.clientHeight;

        context = canvas.getContext('2d');
        // context.globalAlpha = 0.5;

        for (let itemName of ["light_bl", "light_re", "light_gr", "light_ye", "question_bl", "question_re", "question_gr", "question_ye"]) {
            img_path[itemName] = document.getElementById(itemName).src;
        }
    }

    function f_dragstart(event) {
        currentstatus = document.getElementById(event.target.id);
    }

    function f_dragenter(event) {
        currentstatusIsDraw = true;
    }

    function f_dragleave(event) {
        currentstatusIsDraw = false;
        drawItem(event);
    }

    function f_drop(event) {
        event.preventDefault();
        currentstatus.style.border = "solid black";
        currentstatusIsDraw = false;

        // サーバーにデータを送信する
        roomChannel.send({
            "operation": "add",
            "data": {
                "itemName": currentstatus.id,
                "x_coordinate": (event.offsetX - currentstatus.clientWidth * img_ratio / 2) / canvas.width,
                "y_coordinate": (event.offsetY - currentstatus.clientHeight * img_ratio / 2) / canvas.height,
                "width": currentstatus.clientWidth,
                "height": currentstatus.clientHeight
            }
        })

        currentstatus.draggable = false;        
    }

    function drawItem(event) {
        context.clearRect(0, 0, canvas.width, canvas.height);

        if (currentstatus !== null && currentstatusIsDraw){
            // 現在ドラッグ&ドロップしてる要素ならば
            let img = new Image();
            img.src = currentstatus.src;
            img.onload = function () {
                context.drawImage(
                    img,
                    event.offsetX - currentstatus.clientWidth * img_ratio / 2,
                    event.offsetY - currentstatus.clientHeight * img_ratio / 2,
                    currentstatus.clientWidth * img_ratio,
                    currentstatus.clientHeight * img_ratio
                );
            }
        }

        for (let item of ItemStatus){
            let img = new Image();
            img.src = img_path[item["itemName"]];
            img.onload = function () {
                context.drawImage(
                    img,
                    item["x_coordinate"] * canvas.width,
                    item["y_coordinate"] * canvas.height,
                    item["width"] * img_ratio,
                    item["height"] * img_ratio
                );
            }
        }
    }

    function f_dragover(event) {
        event.preventDefault();
        drawItem(event);
    }

    function f_dragend(event) {
        currentstatus = null;
    }

    <% if current_user == @room.user then %>
    function deleteItem(){
        roomChannel.send({
            "operation": "deleteAll"
        })
    }
    <% end %>

    function drawSumPerYear(obj){
        //オブジェクトの整理
        var values = [];
        var eld_values = [];
        var wok_values = [];
        var chd_values =[];
        var years = [];
        for (let i in obj.result.bar.data) {
            // FIXME: 以下はデータの年度が5で割り切れる前提で書いているので修正要
            if (obj.result.bar.data[i].year%5 == 0) {
                years.push(obj.result.bar.data[i].year);
                values[i] = obj.result.bar.data[i].sum;
                for (let j in obj.result.bar.data[i].class) {
                if (obj.result.bar.data[i].class[j].label == "老年人口") {
                    eld_values[i] = obj.result.bar.data[i].class[j].value;
                } else if (obj.result.bar.data[i].class[j].label == "生産年齢人口") {
                    wok_values[i] = obj.result.bar.data[i].class[j].value;
                } else if (obj.result.bar.data[i].class[j].label == "年少人口") {
                    chd_values[i] = obj.result.bar.data[i].class[j].value;
                }
            }
        } else {
            values[i] = null;
            eld_values[i] = null;
            wok_values[i] = null;
            chd_values[i] = null;
        }
    }

    var ctx = document.getElementById("myLineChart");
    var myLineChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: years,
            datasets: [
                {
                    type: 'line',
                    label: '総人口',
                    data: values,
                    borderColor: "rgba(255,75,0,1)",
                    backgroundColor: "rgba(0,0,0,0)",
                    pointStyle: 'circle'
                },
                {
                    type: 'bar',
                    label: '年少人口',
                    data: eld_values,
                    borderColor: "rgba(0,90,255,1)",
                    backgroundColor: "rgba(0,90,255,1)",
                },
                {
                    type: 'bar',
                    label: '生産年齢人口',
                    data: eld_values,
                    borderColor: "rgba(255,241,0,1)",
                    backgroundColor: "rgba(255,241,0,1)",
                },
                {
                    type: 'bar',
                    label: '老年人口',
                    data: chd_values,
                    borderColor: "rgba(3,175,122,1)",
                    backgroundColor: "rgba(3,175,122,1)",
                }
            ],
        },
        options: {
            title: {
                display: true,
                text: '人口増減率'
            },
            scales: {
                yAxes: [{
                    ticks: {
                    // suggestedMax: 16000,
                    // suggestedMin: 0,
                    // stepSize: 2000,
                    callback: function(value, index, values){
                        return  value +  '％'
                    }
                    }
                }]
            },
        }
    });        

    }

    function drawPerYear(obj){
    //オブジェクトの整理
    var values = [];
    var labels = [];
    var years = [];
    for (let i in obj.result.data) {
        values[i] = [];
        labels[i] = obj.result.data[i].label;        
        for(let j in obj.result.data[i].data) {
            // x軸とのずれの確認
            // FIXME: 以下はデータの年度が5で割り切れる前提で書いているので修正要
            if (obj.result.data[i].data[j].year%5 == 0) {
                values[i][j] = obj.result.data[i].data[j].value;
                
                if(i === "0"){
                    years.push(obj.result.data[i].data[j].year);
                }
            } else {
                values[i][j] = null;
            }
        }    
    }

    console.log(labels[0]);
    console.log(values[0]);

    var ctx = document.getElementById("myLineChart");
    var myLineChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: years,
            datasets: [
                {
                label: labels[0],
                data: values[0],
                borderColor: "rgba(255,75,0,1)",
                backgroundColor: "rgba(0,0,0,0)",
                pointStyle: 'circle'
                },
                {
                label: labels[1],
                data: values[1],
                borderColor: "rgba(0,90,255,1)",
                backgroundColor: "rgba(0,0,0,0)",
                pointStyle: 'crossRot'
                },
                {
                label: labels[2],
                data: values[2],
                borderColor: "rgba(3,175,122,1)",
                backgroundColor: "rgba(0,0,0,0)",
                pointStyle: 'rect'
                },
                {
                label: labels[3],
                data: values[3],
                borderColor: "rgba(255,241,0,1)",
                backgroundColor: "rgba(0,0,0,0)",
                pointStyle: 'triangle'
                }
            ],
        },
        options: {
            title: {
                display: true,
                text: '人口推移'
            },
            scales: {
                yAxes: [{
                    ticks: {
                    // suggestedMax: 16000,
                    // suggestedMin: 0,
                    // stepSize: 2000,
                    callback: function(value, index, values){
                        return  value +  '人'
                    }
                    }
                }]
            },
        }
    }); 
    }
</script>